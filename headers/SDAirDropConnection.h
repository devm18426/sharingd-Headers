/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, March 1, 2023 at 11:00:13 PM Israel Standard Time
* Operating System: Version 11.2.3 (Build 20D91)
* Image Source: /usr/libexec/sharingd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <sharingd/sharingd-Structs.h>
#import <libobjc.A.dylib/SDAirDropFileZipperDelegate.h>

@protocol OS_dispatch_queue, OS_dispatch_semaphore, OS_os_transaction, SDAirDropConnectionDelegate;
@class NSURL, NSArray, NSObject, SDStatusMonitor, NSMutableData, SDAirDropFileZipper, NSMutableDictionary, NSData, SDXPCHelperConnection, NSString;

@interface SDAirDropConnection : NSObject <SDAirDropFileZipperDelegate> {

	char _discover;
	char _personAdded;
	char _stopDeferred;
	char _userAccepted;
	char _senderTrusted;
	char _delayedFinish;
	char _queueSuspended;
	char _endEncountered;
	char _connectionClosed;
	char _transactionStarted;
	SFNodeRef _person;
	NSURL* _destination;
	char* _requestBuffer;
	NSArray* _progresses;
	NSObject*<OS_dispatch_queue> _queue;
	SecTrustRef _clientTrust;
	double _startTime;
	SDStatusMonitor* _monitor;
	long long _lastEvent;
	NSMutableData* _requestData;
	CFReadStreamRef _readStream;
	SDAirDropFileZipper* _zipper;
	NSMutableDictionary* _properties;
	unsigned _powerAssertionID;
	NSObject*<OS_dispatch_semaphore> _askSemaphore;
	CFHTTPServerRequestRef _askRequest;
	CFHTTPServerRequestRef _uploadRequest;
	CFHTTPServerRequestRef _discoverRequest;
	CFHTTPServerConnectionRef _connection;
	NSData* _mediaCapabilities;
	NSObject*<OS_os_transaction> _transaction;
	SDXPCHelperConnection* _xpcHelperConnection;
	char _contactsOnly;
	char _shouldExtractMediaFromPhotosBundles;
	NSString* _sessionID;
	id<SDAirDropConnectionDelegate> _delegate;

}

@property (assign) char contactsOnly;                                     //@synthesize contactsOnly=_contactsOnly - In the implementation block
@property (copy) NSURL * destination;                                     //@synthesize destination=_destination - In the implementation block
@property (copy) NSString * sessionID;                                    //@synthesize sessionID=_sessionID - In the implementation block
@property (assign) char shouldExtractMediaFromPhotosBundles;              //@synthesize shouldExtractMediaFromPhotosBundles=_shouldExtractMediaFromPhotosBundles - In the implementation block
@property (__weak) id<SDAirDropConnectionDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)fileInfoExpectedClassForKeyMap;
+(id)validatedFileInfo:(id)arg1 ;
+(id)validatedFilesArray:(id)arg1 ;
+(id)validatedItemsArray:(id)arg1 ;
-(void)dealloc;
-(id<SDAirDropConnectionDelegate>)delegate;
-(void)setDelegate:(id<SDAirDropConnectionDelegate>)arg1 ;
-(void)setProperty:(void*)arg1 forKey:(CFStringRef)arg2 ;
-(id)initWithConnection:(CFHTTPServerConnectionRef)arg1 ;
-(void)start;
-(void)stop;
-(NSURL *)destination;
-(void)setDestination:(NSURL *)arg1 ;
-(NSString *)sessionID;
-(void)setSessionID:(NSString *)arg1 ;
-(void)schedule;
-(id)compressionType;
-(void)finishOperation;
-(char)accept;
-(void)removeObservers;
-(void)didReceiveError:(CFErrorRef)arg1 ;
-(void)addObservers;
-(void)processRequest;
-(char)senderIsMe;
-(char)contactsOnly;
-(void)setContactsOnly:(char)arg1 ;
-(void)wirelessPowerChanged:(id)arg1 ;
-(void)releaseIdleSleepAssertion;
-(void)systemWillSleep:(id)arg1 ;
-(void)fileZipper:(id)arg1 event:(long long)arg2 withProperty:(void*)arg3 ;
-(char)shouldExtractMediaFromPhotosBundles;
-(void)setShouldExtractMediaFromPhotosBundles:(char)arg1 ;
-(void)cancelAndDecline;
-(void)setSpotlightMetadata:(id)arg1 ;
-(double)getTransferRate;
-(id)whereFromInfo;
-(void)storeDataValue:(CFDictionaryRef)arg1 forKey:(CFStringRef)arg2 ;
-(void)storeStringValue:(CFDictionaryRef)arg1 forKey:(CFStringRef)arg2 ;
-(void)notifyClientOfBytesCopied:(id)arg1 timeRemaining:(id)arg2 ;
-(void)handleClosedConnection;
-(void)notifyClientForEvent:(long long)arg1 ;
-(void)notifyClient:(long long)arg1 withResults:(id)arg2 ;
-(void)performBlockForAllProgresses:(/*^block*/id)arg1 ;
-(void)handleTerminalCallBack;
-(char)senderInfoAvailable;
-(void)silentlyCancelRequest;
-(void)enqueueResponse:(CFHTTPServerRequestRef)arg1 code:(long long)arg2 body:(CFDataRef)arg3 ;
-(void)logSenderIsBlocked;
-(char)senderIsTrusted:(id)arg1 ;
-(char)senderIsBlocked;
-(void)sendDiscoverResponse:(long long)arg1 forKnownAlias:(id)arg2 ;
-(void)storeArrayValue:(CFDictionaryRef)arg1 forKey:(CFStringRef)arg2 ;
-(void)storeIconValue:(CFDictionaryRef)arg1 forKey:(CFStringRef)arg2 ;
-(void)convertURLStringsToURLs;
-(SFNodeRef)createPersonForAskRequest;
-(char)allowAskRequestFromPerson:(SFNodeRef)arg1 ;
-(void)adjustPropertiesForPhotosBundles;
-(void)silentlyCancelRequestOnMainThread;
-(void)sendAskResponse:(long long)arg1 ;
-(void)parseDiscoverRequest;
-(void)handleDiscoverRequest;
-(void)parseAskRequest;
-(void)handleAskRequest;
-(void)startPublishingProgressForPlaceholderFiles:(id)arg1 ;
-(char)startReceivingBody:(CFHTTPServerRequestRef)arg1 error:(id*)arg2 ;
-(void)enqueueBadResponseForRequest:(CFHTTPServerRequestRef)arg1 ;
-(void)makeDestinationDirectory;
-(void)storeRequestValue:(CFHTTPServerRequestRef)arg1 forKey:(CFStringRef)arg2 convertToNumber:(char)arg3 ;
-(char)thereIsEnoughFreeSpace;
-(char)oneHundredContinue:(CFHTTPServerRequestRef)arg1 ;
-(char)startReceivingFile:(CFHTTPServerRequestRef)arg1 error:(id*)arg2 ;
-(void)sendUploadResponse:(long long)arg1 ;
-(long long)getStatusCode:(CFHTTPServerResponseRef)arg1 ;
-(void)storeNumberValue:(CFDictionaryRef)arg1 forKey:(CFStringRef)arg2 ;
-(char)transferIsOverPrebufferLimit;
-(void)setCombinedFileURLsAndItems:(id)arg1 ;
-(void)didCloseConnection;
-(void)storeBooleanValue:(CFDictionaryRef)arg1 forKey:(CFStringRef)arg2 ;
-(void)handleReadStreamEvent:(CFReadStreamRef)arg1 event:(unsigned long long)arg2 ;
-(void)didReceiveRequest:(CFHTTPServerRequestRef)arg1 ;
-(void)didSendResponse:(CFHTTPServerResponseRef)arg1 forRequest:(CFHTTPServerRequestRef)arg2 ;
-(void)didFailToSendResponse:(CFHTTPServerResponseRef)arg1 ;
@end

